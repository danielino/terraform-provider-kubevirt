diff --git a/virtualmachineinstance/domain_spec.go b/virtualmachineinstance/domain_spec.go
--- a/virtualmachineinstance/domain_spec.go
+++ b/virtualmachineinstance/domain_spec.go
@@ func expandDomainSpec(domainSpec []interface{}) (kubevirtapiv1.DomainSpec, error) {
    if v, ok := in["resources"].([]interface{}); ok {
        resources, err := expandResources(v)
        if err != nil {
            return result, err
        }
        result.Resources = resources
    }
    if v, ok := in["devices"].([]interface{}); ok {
        devices, err := expandDevices(v)
        if err != nil {
            return result, err
        }
        result.Devices = devices
    }
+   // --- NEW: expand features & firmware ---
+   if v, ok := in["features"].([]interface{}); ok {
+       result.Features = expandDomainFeatures(v)
+   }
+   if v, ok := in["firmware"].([]interface{}); ok {
+       result.Firmware = expandDomainFirmware(v)
+   }
    return result, nil
@@ func flattenDomainSpec(in kubevirtapiv1.DomainSpec) []interface{} {
    att := make(map[string]interface{})
 
    att["resources"] = flattenResources(in.Resources)
    att["devices"]   = flattenDevices(in.Devices)
+   // --- NEW: flatten features & firmware ---
+   if in.Features != nil {
+       att["features"] = flattenDomainFeatures(in.Features)
+   }
+   if in.Firmware != nil {
+       att["firmware"] = flattenDomainFirmware(in.Firmware)
+   }
 
    return []interface{}{att}
 }
 
+// --- HELPERS ---
+func expandDomainFeatures(in []interface{}) *kubevirtapiv1.Features {
+   if len(in) == 0 || in[0] == nil {
+       return nil
+   }
+   m := in[0].(map[string]interface{})
+   f := &kubevirtapiv1.Features{}
+
+   if s, ok := m["ssm"].([]interface{}); ok && len(s) > 0 && s[0] != nil {
+       ssmm := s[0].(map[string]interface{})
+       if enabled, ok2 := ssmm["enabled"].(bool); ok2 && enabled {
+           // FeatureState.Enabled Ã¨ *bool
+           f.SMM = &kubevirtapiv1.FeatureState{Enabled: pointer.Bool(true)}
+       }
+   }
+   return f
+}
+
+func expandDomainFirmware(in []interface{}) *kubevirtapiv1.Firmware {
+   if len(in) == 0 || in[0] == nil {
+       return nil
+   }
+   m := in[0].(map[string]interface{})
+   fw := &kubevirtapiv1.Firmware{}
+
+   if blArr, ok := m["bootloader"].([]interface{}); ok && len(blArr) > 0 && blArr[0] != nil {
+       bl := blArr[0].(map[string]interface{})
+       if _, hasEFI := bl["efi"]; hasEFI {
+           fw.Bootloader = &kubevirtapiv1.Bootloader{EFI: &kubevirtapiv1.EFIBoot{}}
+       }
+   }
+   return fw
+}
+
+func flattenDomainFeatures(in *kubevirtapiv1.Features) []interface{} {
+   m := map[string]interface{}{}
+   if in.SMM != nil && in.SMM.Enabled != nil && *in.SMM.Enabled {
+       m["ssm"] = []interface{}{map[string]interface{}{"enabled": true}}
+   }
+   if len(m) == 0 {
+       return nil
+   }
+   return []interface{}{m}
+}
+
+func flattenDomainFirmware(in *kubevirtapiv1.Firmware) []interface{} {
+   if in.Bootloader == nil || in.Bootloader.EFI == nil {
+       return nil
+   }
+   // {"bootloader":[{"efi":[]}]}
+   return []interface{}{map[string]interface{}{
+       "bootloader": []interface{}{map[string]interface{}{
+           "efi": []interface{}{map[string]interface{}{}},
+       }},
+   }}
+}

